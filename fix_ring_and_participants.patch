diff --git a/blueprints/routes_events.py b/blueprints/routes_events.py
index 1111111..2222222 100644
--- a/blueprints/routes_events.py
+++ b/blueprints/routes_events.py
@@ -1,3 +1,5 @@
+# --- PATCH: API für Ring-Dashboard + Entfernen-Endpoint ---
+from flask import jsonify, request, redirect, url_for, flash
 import os
 import json
 from uuid import uuid4
@@ -250,6 +252,154 @@ def manage_runs(event_id):
     return render_template('manage_runs.html', event=event, judges=judges)

 
+# --------------------------------------------------------------------
+# HILFSFUNKTIONEN (lokal, defensiv – greifen nur auf /data zu)
+# Wir lesen Events aus JSON-Dateien im data/-Ordner aus. Das ist robust,
+# auch wenn das Projekt keine zentrale „DB“ hat.
+# --------------------------------------------------------------------
+def _data_dir():
+    return os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'data'))
+
+def _load_json_file(path):
+    try:
+        with open(path, 'r', encoding='utf-8') as f:
+            return json.load(f)
+    except Exception:
+        return None
+
+def _save_json_file(path, data):
+    os.makedirs(os.path.dirname(path), exist_ok=True)
+    with open(path, 'w', encoding='utf-8') as f:
+        json.dump(data, f, ensure_ascii=False, indent=4)
+
+def _find_event_file(event_id: str):
+    """Suche eine JSON-Datei im data/-Baum, die ein Event mit passender id enthält.
+       Bevorzugt: Datei, deren Name die ID enthält. Fallback: vollständiger Scan."""
+    base = _data_dir()
+    candidates = []
+    for root, _, files in os.walk(base):
+        for fn in files:
+            if not fn.lower().endswith('.json'):
+                continue
+            p = os.path.join(root, fn)
+            if event_id in fn:
+                candidates.append(p)
+    # Wenn es eindeutigen Kandidaten gibt, nimm den.
+    if len(candidates) == 1:
+        return candidates[0]
+    # Sonst: Scan aller JSONs und prüfe, ob darin ein Event-Objekt mit id==event_id steckt
+    for root, _, files in os.walk(base):
+        for fn in files:
+            if not fn.lower().endswith('.json'):
+                continue
+            p = os.path.join(root, fn)
+            data = _load_json_file(p)
+            if isinstance(data, dict) and data.get('id') == event_id and 'runs' in data:
+                return p
+            if isinstance(data, list) and data and isinstance(data[0], dict) and data[0].get('id') == event_id and 'runs' in data[0]:
+                # Der Fall, in dem das Event als erstes Element in einer Liste steht
+                return p
+    return None
+
+def _load_event_by_id(event_id: str):
+    path = _find_event_file(event_id)
+    if not path:
+        return None, None
+    data = _load_json_file(path)
+    # Event kann als Dict oder als erstes Element einer Liste vorliegen (siehe deine Beispiele).
+    if isinstance(data, dict) and data.get('id') == event_id:
+        return data, path
+    if isinstance(data, list) and data and isinstance(data[0], dict) and data[0].get('id') == event_id:
+        return data[0], path
+    return None, None
+
+def _save_event_by_id(event_id: str, event_obj, path_hint=None):
+    # Wenn wir wissen, woher es kam, dort zurückschreiben (auch wenn Datei eine Liste enthält).
+    path = path_hint or _find_event_file(event_id)
+    if not path:
+        # Fallback: schreibe als einzelne Event-Datei in data/events/<id>.json
+        path = os.path.join(_data_dir(), 'events', f'{event_id}.json')
+        _save_json_file(path, event_obj)
+        return
+    current = _load_json_file(path)
+    if isinstance(current, dict) and current.get('id') == event_id:
+        current = event_obj
+        _save_json_file(path, current)
+        return
+    if isinstance(current, list) and current and isinstance(current[0], dict) and current[0].get('id') == event_id:
+        current[0] = event_obj
+        _save_json_file(path, current)
+        return
+    # Andernfalls überschreiben wir vorsichtig mit dem Event-Objekt.
+    _save_json_file(path, event_obj)
+
+
+# --------------------------------------------------------------------
+# API: Details für einen Lauf (für Ring-PC-Dashboard)
+# GET /events/api/get_run_details/<event_id>/<run_id>
+# Antwortschema: { success: bool, data: { entries: [...] }, message?: str }
+# --------------------------------------------------------------------
+@events_bp.route('/events/api/get_run_details/<event_id>/<run_id>', methods=['GET'])
+def api_get_run_details(event_id, run_id):
+    event, _path = _load_event_by_id(event_id)
+    if not event:
+        return jsonify(success=False, message='Event nicht gefunden'), 404
+    run = next((r for r in (event.get('runs') or []) if r.get('id') == run_id), None)
+    if not run:
+        return jsonify(success=False, message='Lauf nicht gefunden'), 404
+    entries = run.get('entries') or []
+    # Stelle sicher, dass Felder vorhanden sind, die das Frontend erwartet:
+    normalized = []
+    for e in entries:
+        normalized.append({
+            "Startnummer": e.get("Startnummer"),
+            "Hundefuehrer": e.get("Hundefuehrer"),
+            "Hundename": e.get("Hundename"),
+            "Lizenznummer": e.get("Lizenznummer"),
+            "Kategorie": e.get("Kategorie"),
+            "Klasse": e.get("Klasse"),
+            "status_vermerk": e.get("status_vermerk"),
+            "result": e.get("result") or {}
+        })
+    return jsonify(success=True, data={"entries": normalized})
+
+
+# --------------------------------------------------------------------
+# POST: Teilnehmer komplett aus Event entfernen (allen Läufen)
+# POST /events/remove_participant_from_event/<event_id>/<license_nr>
+# Wird u.a. von manage_all_participants.html verlinkt.
+# --------------------------------------------------------------------
+@events_bp.route('/events/remove_participant_from_event/<event_id>/<license_nr>', methods=['POST'])
+def remove_participant_from_event(event_id, license_nr):
+    event, path = _load_event_by_id(event_id)
+    if not event:
+        flash('Event nicht gefunden.', 'danger')
+        return redirect(url_for('events_bp.manage_all_participants', event_id=event_id))
+    changed = False
+    for run in (event.get('runs') or []):
+        if isinstance(run.get('entries'), list):
+            before = len(run['entries'])
+            run['entries'] = [e for e in run['entries'] if str(e.get('Lizenznummer')) != str(license_nr)]
+            if len(run['entries']) != before:
+                changed = True
+    if changed:
+        _save_event_by_id(event_id, event, path_hint=path)
+        flash(f'Teilnehmer {license_nr} aus allen Läufen entfernt.', 'success')
+    else:
+        flash(f'Keine Zuordnungen für {license_nr} gefunden.', 'info')
+    return redirect(url_for('events_bp.manage_all_participants', event_id=event_id))
+
+
diff --git a/templates/ring_pc_dashboard.html b/templates/ring_pc_dashboard.html
index 3333333..4444444 100644
--- a/templates/ring_pc_dashboard.html
+++ b/templates/ring_pc_dashboard.html
@@ -1,6 +1,15 @@
 {% extends "layout.html" %}
 {% block title %}Ring-PC: {{ ring_name }} - {{ event.Bezeichnung }}{% endblock %}
 {% set kiosk_mode = True %}
+
+{# --- PATCH: Button-Texte auf schwarz (übersichtlicher auf hellen Buttons) --- #}
+{% block head_extra %}
+<style>
+  .btn, .btn:visited { color: #111 !important; } /* erzwingt dunkle Schrift auf Buttons */
+  .btn.text-white { color: #111 !important; }     /* falls irgendwo text-white gesetzt war */
+</style>
+{% endblock %}
 
 {% block content %}
 <style>
@@ -74,7 +83,7 @@ document.addEventListener('DOMContentLoaded', function() {
     function fetchRunDetails() {
         if (!state.currentRunId) return;
-        const url = `/api/get_run_details/${eventId}/${state.currentRunId}`;
+        const url = `/events/api/get_run_details/${eventId}/${state.currentRunId}`;
         fetch(url)
             .then(res => res.ok ? res.json() : Promise.reject(res.status))
             .then(data => { if (data.success) { state.allEntries = data.data.entries; renderStarterList(); } else { alert(`Fehler: ${data.message}`); } })
diff --git a/templates/layout.html b/templates/layout.html
index 5555555..6666666 100644
--- a/templates/layout.html
+++ b/templates/layout.html
@@ -62,6 +62,15 @@
     {% endif %}
   </nav>
 
+  {# --- PATCH: globale Button-Schriftfarbe auf schwarz (für helle Buttons) --- #}
+  <style>
+    .btn.btn-light,
+    .btn.btn-outline-light,
+    .btn.btn-white,
+    .btn.bg-white {
+      color: #111 !important;
+    }
+  </style>
 
   <div class="container mt-3">
     {% block content %}{% endblock %}
diff --git a/templates/manage_all_participants.html b/templates/manage_all_participants.html
index 7777777..8888888 100644
--- a/templates/manage_all_participants.html
+++ b/templates/manage_all_participants.html
@@ -36,7 +36,7 @@
     {% for p in assigned_participants %}
       <tr>
         <td>{{ p.Lizenznummer }}</td>
-        <td>
-          <form action="{{ url_for('events_bp.remove_participant_from_event', event_id=event.id, license_nr=p.Lizenznummer) }}" method="POST" onsubmit="return confirm('Teilnehmer wirklich aus allen Läufen entfernen?');">
+        <td>
+          <form action="{{ url_for('events_bp.remove_participant_from_event', event_id=event.id, license_nr=p.Lizenznummer) }}" method="POST" onsubmit="return confirm('Teilnehmer wirklich aus allen Läufen entfernen?');">
             <button class="btn btn-sm btn-outline-danger">Entfernen</button>
           </form>
         </td>
